/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.7";
  static = false;
}

PARSER_BEGIN(DomainTree)
package drctree;

public class DomainTree
{
  public static void main(String args []) throws ParseException
  {
    System.out.println("Please input a domain calculus expression: ");
    DomainTree dt = new DomainTree(System.in);
    try
    {
      SimpleNode n = dt.Start();
      n.dump("");
      System.out.println("Thank you.");
    }
    catch(ParseException e)
    {
      System.out.println("THE INPUT IS NOT A DOMAIN CALCULUS EXPRESSION!");
      System.out.println(e.getMessage());
    }
    catch(TokenMgrError e)
    {
      System.out.println("UNRECOGNISABLE TOKEN!");
      System.out.println(e.getMessage());
    }
  }
}

PARSER_END(DomainTree)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : 
{
  < LEFTBRACE : "{" >
| < RIGHTBRACE : "}" >
| < LEFTSQUARE : "[" >
| < RIGHTSQUARE : "]" >
| < SEPERATOR : "|" >
| < NOT : "\u00ac" >
| < EXIST : "\u2203" >
| < FORALL : "\u2200" >
| < AND : "\u039b" >
| < OR : "\u2228" >
}

TOKEN :
{
  < NUMBER : (< DIGIT >)+ >
| < ALIAS : (< LETTER >) >
| < WORD : (< LETTER >)+ >
| < CONSTRAIN : "'"(~["'"])+"'" >
| < #DIGIT : [ "0"-"9" ] >
| < #LETTER : ["a"-"z", "A"-"Z"] >
}

/**
* The JavaCC grammar for Domain Relational Calculus expressions
* Used to generate a JavaCC parse tree.
*/

SimpleNode Start() :
{}
{
  expression() ";"
  {
    return jjtThis;
  }
}

int one_line() :
{}
{
  expression()";"
  {
    return 0;
  }
| ";"
  {
    return 1;
  }
}

// domain calculus expression
void expression() #EXPR:
{}
{
  < LEFTBRACE >
  result() < SEPERATOR >
  subexpression()
  < RIGHTBRACE >
}

// the results that the users want to select from the database
String result() #RES:
{Token t; String var;}
{
  t = < ALIAS >
  { var = ""; var += t.image.toString(); }
  t = < NUMBER >
  { var += t.image.toString();  }
  (
	  "," { var += ","; }
	  t = < ALIAS >
	  { var += t.image.toString(); }
	  t = < NUMBER >
	  { var += t.image.toString();  }
  )*
  
  {jjtThis.value = var; return var;  }
}

// the expressions that connected conjunction expressions using OR operand
String subexpression() #SUB:
{Token t; String s; String sub = "";}
{
  sub = conjunction()
  (
    t = < OR >
    s = conjunction()
    {
      sub += t.image.toString() + s;
    }
  )*
  {
    jjtThis.value = sub; return sub;
  }
}

// the expression that connect terms using AND operand
String conjunction() #CONJ:
{Token t; String s; String conj = "";}
{
  conj = term()
  (
    t =  < AND >
    s = term()
    {
      conj += t.image.toString() + s;
    }
  )*
  {jjtThis.value = conj; return conj;}
}

// a term connects each other with AND
String term() #TERM:
{Token t; String s, s2; String term = "";}
{
(
  (
     // start with not
    t = < NOT >
    s = term()
    {
      term += t.image.toString() + s;
    }
  )
| (
  // the existence expressions
	t = < EXIST >
	s = variablelist()
	"("
	s2 = subexpression()
	")"
	{
	  term += t.image.toString() + s + "(" + s2 + ")";
	}
  )
| (
  // the universal expressions
	t = < FORALL >
	s = variablelist()
	"("
	s2 = subexpression()
	")"
	{
	  term += t.image.toString() + s + "(" + s2 + ")";
	}
  )
| (
  // condition
	s = condition()
	{
	  term += s;
	}
  )
| (
  // table
    s = table()
    {
      term += s;
    }
  )
)
{jjtThis.value = term; return term;}
}

// a list of variables
String variablelist() #VARLIST:
{String t; String list;}
{
  list = variable()
  (
    ","
    t = variable()
    { list += ", " + t; }
  )*
  { jjtThis.value = list; return list; }
}

// the variables, such as x1, y2 and etc.
String variable() #VAR:
{Token t; String var = "";}
{
  t = < ALIAS >
  { var += t.image.toString(); }
  t = < NUMBER >
  { var += t.image.toString(); jjtThis.value = var; return var;  }
}

// the tables, start with table's name, and a list of all the variables of the same number of the tables columns
String table() #TAB:
{Token t; String tab; String s;}
{
  t = < WORD >
  { tab = ""; tab += t.image.toString() + "(";  }
  "("
  s = variablelist()
  ")" 
  { tab += s + ")"; jjtThis.value = tab; return tab; }
}

// the conditions for the selection
String condition() #COND:
{Token t; String cond = ""; String s;}
{
  (
    
    ( 
      cond = variable()
    | t = < CONSTRAIN > { cond += t.image.toString(); }
    | t = < NUMBER > { cond += t.image.toString(); }
    )
    (
      "=" { cond += "="; }
    | ">" { cond += ">"; }
    | "<" { cond += "<"; }
    | ">=" { cond += ">="; }
    | "<=" { cond += "<="; }
    | "!=" { cond += "!="; }
    | "<>" { cond += "<>"; }
    )
    ( 
      t = < CONSTRAIN > { cond += t.image.toString(); }
    | t = < NUMBER > { cond += t.image.toString(); }
    | s = variable() { cond += s; }
    )
  )
  { jjtThis.value = cond; return cond; }
}
