/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. DomainCalculusTree.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.7";
  static = false;
}

PARSER_BEGIN(DomainTree)
package drctree;

public class DomainTree/*@bgen(jjtree)*/implements DomainTreeTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTDomainTreeState jjtree = new JJTDomainTreeState();

/*@egen*/
  public static void main(String args []) throws ParseException
  {
    System.out.println("Please input a domain calculus expression: ");
    DomainTree dt = new DomainTree(System.in);
    try
    {
      SimpleNode n = dt.Start();
      n.dump("");
      System.out.println("Thank you.");
    }
    catch(ParseException e)
    {
      System.out.println("THE INPUT IS NOT A DOMAIN CALCULUS EXPRESSION!");
      System.out.println(e.getMessage());
    }
    catch(TokenMgrError e)
    {
      System.out.println("UNRECOGNISABLE TOKEN!");
      System.out.println(e.getMessage());
    }
  }
}

PARSER_END(DomainTree)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : 
{
  < LEFTBRACE : "{" >
| < RIGHTBRACE : "}" >
| < LEFTSQUARE : "[" >
| < RIGHTSQUARE : "]" >
| < SEPERATOR : "|" >
| < NOT : "\u00ac" >
| < EXIST : "\u2203" >
| < FORALL : "\u2200" >
| < AND : "\u039b" >
| < OR : "\u2228" >
}

TOKEN :
{
  < NUMBER : (< DIGIT >)+ >
| < ALIAS : (< LETTER >) >
| < WORD : (< LETTER >)+ >
| < CONSTRAIN : "'"(~["'"])+"'" >
| < #DIGIT : [ "0"-"9" ] >
| < #LETTER : ["a"-"z", "A"-"Z"] >
}

/**
* The JavaCC grammar for Domain Relational Calculus expressions
* Used to generate a JavaCC parse tree.
*/

SimpleNode Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  expression() ";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

int one_line() :
{/*@bgen(jjtree) one_line */
  SimpleNode jjtn000 = new SimpleNode(JJTONE_LINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) one_line */
  try {
/*@egen*/
  expression()";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return 0;
  }
| ";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return 1;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

// domain calculus expression
void expression()      :
{/*@bgen(jjtree) EXPR */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EXPR */
  try {
/*@egen*/
  < LEFTBRACE >
  result() < SEPERATOR >
  subexpression()
  < RIGHTBRACE >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

// the results that the users want to select from the database
String result()     :
{/*@bgen(jjtree) RES */
 SimpleNode jjtn000 = new SimpleNode(JJTRES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String var;}
{/*@bgen(jjtree) RES */
  try {
/*@egen*/
  t = < ALIAS >
  { var = ""; var += t.image.toString(); }
  t = < NUMBER >
  { var += t.image.toString();  }
  (
	  "," { var += ","; }
	  t = < ALIAS >
	  { var += t.image.toString(); }
	  t = < NUMBER >
	  { var += t.image.toString();  }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  
  {jjtn000.value = var; return var;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

// the expressions that connected conjunction expressions using OR operand
String subexpression()     :
{/*@bgen(jjtree) SUB */
 SimpleNode jjtn000 = new SimpleNode(JJTSUB);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String s; String sub = "";}
{/*@bgen(jjtree) SUB */
  try {
/*@egen*/
  sub = conjunction()
  (
    t = < OR >
    s = conjunction()
    {
      sub += t.image.toString() + s;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.value = sub; return sub;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

// the expression that connect terms using AND operand
String conjunction()      :
{/*@bgen(jjtree) CONJ */
 SimpleNode jjtn000 = new SimpleNode(JJTCONJ);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String s; String conj = "";}
{/*@bgen(jjtree) CONJ */
  try {
/*@egen*/
  conj = term()
  (
    t =  < AND >
    s = term()
    {
      conj += t.image.toString() + s;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.value = conj; return conj;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

// a term connects each other with AND
String term()      :
{/*@bgen(jjtree) TERM */
 SimpleNode jjtn000 = new SimpleNode(JJTTERM);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String s, s2; String term = "";}
{/*@bgen(jjtree) TERM */
try {
/*@egen*/
(
  (
     // start with not
    t = < NOT >
    s = term()
    {
      term += t.image.toString() + s;
    }
  )
| (
  // the existence expressions
	t = < EXIST >
	s = variablelist()
	"("
	s2 = subexpression()
	")"
	{
	  term += t.image.toString() + s + "(" + s2 + ")";
	}
  )
| (
  // the universal expressions
	t = < FORALL >
	s = variablelist()
	"("
	s2 = subexpression()
	")"
	{
	  term += t.image.toString() + s + "(" + s2 + ")";
	}
  )
| (
  // condition
	s = condition()
	{
	  term += s;
	}
  )
| (
  // table
    s = table()
    {
      term += s;
    }
  )
)/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
{jjtn000.value = term; return term;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

// a list of variables
String variablelist()         :
{/*@bgen(jjtree) VARLIST */
 SimpleNode jjtn000 = new SimpleNode(JJTVARLIST);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String t; String list;}
{/*@bgen(jjtree) VARLIST */
  try {
/*@egen*/
  list = variable()
  (
    ","
    t = variable()
    { list += ", " + t; }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.value = list; return list; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

// the variables, such as x1, y2 and etc.
String variable()     :
{/*@bgen(jjtree) VAR */
 SimpleNode jjtn000 = new SimpleNode(JJTVAR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String var = "";}
{/*@bgen(jjtree) VAR */
  try {
/*@egen*/
  t = < ALIAS >
  { var += t.image.toString(); }
  t = < NUMBER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { var += t.image.toString(); jjtn000.value = var; return var;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

// the tables, start with table's name, and a list of all the variables of the same number of the tables columns
String table()     :
{/*@bgen(jjtree) TAB */
 SimpleNode jjtn000 = new SimpleNode(JJTTAB);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String tab; String s;}
{/*@bgen(jjtree) TAB */
  try {
/*@egen*/
  t = < WORD >
  { tab = ""; tab += t.image.toString() + "(";  }
  "("
  s = variablelist()
  ")"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  { tab += s + ")"; jjtn000.value = tab; return tab; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

// the conditions for the selection
String condition()      :
{/*@bgen(jjtree) COND */
 SimpleNode jjtn000 = new SimpleNode(JJTCOND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String cond = ""; String s;}
{/*@bgen(jjtree) COND */
  try {
/*@egen*/
  (
    
    ( 
      cond = variable()
    | t = < CONSTRAIN > { cond += t.image.toString(); }
    | t = < NUMBER > { cond += t.image.toString(); }
    )
    (
      "=" { cond += "="; }
    | ">" { cond += ">"; }
    | "<" { cond += "<"; }
    | ">=" { cond += ">="; }
    | "<=" { cond += "<="; }
    | "!=" { cond += "!="; }
    | "<>" { cond += "<>"; }
    )
    ( 
      t = < CONSTRAIN > { cond += t.image.toString(); }
    | t = < NUMBER > { cond += t.image.toString(); }
    | s = variable() { cond += s; }
    )
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.value = cond; return cond; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
