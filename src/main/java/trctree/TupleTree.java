/* Generated By:JJTree&JavaCC: Do not edit this line. TupleTree.java */
package trctree;

public class TupleTree/*@bgen(jjtree)*/implements TupleTreeTreeConstants, TupleTreeConstants {/*@bgen(jjtree)*/
  protected JJTTupleTreeState jjtree = new JJTTupleTreeState();public static void main(String args [])
  {
    System.out.println("Please input a tuple calculus expression: ");
    TupleTree tt = new TupleTree(System.in);
    try
    {
      SimpleNode n = tt.Start();
      n.dump("");
      System.out.println("Thank you.");
    }
    catch(ParseException e)
    {
      System.out.println("THE INPUT IS NOT A TUPLE CALCULUS EXPRESSION!");
      System.out.println(e.getMessage());
    }
    catch(TokenMgrError e)
    {
      System.out.println("UNRECOGNISABLE TOKEN!");
      System.out.println(e.getMessage());
    }
  }

/**
* The JavaCC grammar for Tuple Relational Calculus expressions
* Used to generate a JavaCC parse tree.
*/
  final public SimpleNode Start() throws ParseException {
 /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      expression();
      jj_consume_token(21);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public int one_line() throws ParseException {
 /*@bgen(jjtree) one_line */
  SimpleNode jjtn000 = new SimpleNode(JJTONE_LINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTBRACE:
        expression();
        jj_consume_token(21);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return 0;}
        break;
      case 21:
        jj_consume_token(21);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return 1;}
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

// tuple calculus expression
  final public void expression() throws ParseException {
 /*@bgen(jjtree) EXPR */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LEFTBRACE);
      result();
      jj_consume_token(SEPERATOR);
      subexpression();
      jj_consume_token(RIGHTBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// the results that users want to select from the database
  final public String result() throws ParseException {
 /*@bgen(jjtree) RES */
 SimpleNode jjtn000 = new SimpleNode(JJTRES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t; String var;
    try {
      t = jj_consume_token(ALIAS);
    var = ""; var += t.image.toString();
      t = jj_consume_token(LEFTSQUARE);
    var += t.image.toString();
      t = jj_consume_token(NUMBER);
    var += t.image.toString();
      t = jj_consume_token(RIGHTSQUARE);
    var += t.image.toString();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 22:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        jj_consume_token(22);
                var += ",";
        t = jj_consume_token(ALIAS);
            var += t.image.toString();
        t = jj_consume_token(LEFTSQUARE);
            var += t.image.toString();
        t = jj_consume_token(NUMBER);
            var += t.image.toString();
        t = jj_consume_token(RIGHTSQUARE);
            var += t.image.toString();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.value = var; {if (true) return var;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

// the expressions that connected conjunction expressions using OR operand
  final public String subexpression() throws ParseException {
 /*@bgen(jjtree) SUB */
 SimpleNode jjtn000 = new SimpleNode(JJTSUB);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t; String s; String sub = "";
    try {
      sub = conjunction();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        t = jj_consume_token(OR);
        s = conjunction();
      sub += t.image.toString() + s;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.value = sub; {if (true) return sub;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

// the expression that connect terms using AND operand
  final public String conjunction() throws ParseException {
 /*@bgen(jjtree) CONJ */
 SimpleNode jjtn000 = new SimpleNode(JJTCONJ);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t; String s; String conj = "";
    try {
      conj = term();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        t = jj_consume_token(AND);
        s = term();
      conj += t.image.toString() + s;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.value = conj; {if (true) return conj;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

// a term connects each other with AND
  final public String term() throws ParseException {
 /*@bgen(jjtree) TERM */
 SimpleNode jjtn000 = new SimpleNode(JJTTERM);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t; String s, s2; String term = "";
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        // start with not
            t = jj_consume_token(NOT);
        s = term();
      term += t.image.toString() + s;
        break;
      case EXIST:
        // the existence expressions
                t = jj_consume_token(EXIST);
        s = variablelist();
        jj_consume_token(23);
        s2 = subexpression();
        jj_consume_token(24);
          term += t.image.toString() + s + "(" + s2 + ")";
        break;
      case FORALL:
        // the universal expressions
                t = jj_consume_token(FORALL);
        s = variablelist();
        jj_consume_token(23);
        s2 = subexpression();
        jj_consume_token(24);
          term += t.image.toString() + s + "(" + s2 + ")";
        break;
      case NUMBER:
      case ALIAS:
      case CONSTRAIN:
        // condition
                s = condition();
          term += s;
        break;
      case WORD:
        // table
            s = table();
      term += s;
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 jjtn000.value = term; {if (true) return term;}
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

// the variables, such as x[1], y[2] and etc.
  final public String variable() throws ParseException {
 /*@bgen(jjtree) VAR */
 SimpleNode jjtn000 = new SimpleNode(JJTVAR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t; String var;
    try {
      t = jj_consume_token(ALIAS);
    var = ""; var += t.image.toString();
      t = jj_consume_token(LEFTSQUARE);
    var += t.image.toString();
      t = jj_consume_token(NUMBER);
    var += t.image.toString();
      t = jj_consume_token(RIGHTSQUARE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    var += t.image.toString(); jjtn000.value = var; {if (true) return var;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

// a list of variables
  final public String variablelist() throws ParseException {
 /*@bgen(jjtree) LIST */
 SimpleNode jjtn000 = new SimpleNode(JJTLIST);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t; String list = "";
    try {
      t = jj_consume_token(ALIAS);
                   list += t.image.toString();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 22:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        jj_consume_token(22);
        t = jj_consume_token(ALIAS);
      list += "," + t.image.toString();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.value = list; {if (true) return list;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

// the tables, start with table's name, and a list of all the variables of the same number of the tables columns
  final public String table() throws ParseException {
 /*@bgen(jjtree) TAB */
 SimpleNode jjtn000 = new SimpleNode(JJTTAB);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t; String tab;
    try {
      t = jj_consume_token(WORD);
    tab = ""; tab += t.image.toString() + "(";
      jj_consume_token(23);
      t = jj_consume_token(ALIAS);
      jj_consume_token(24);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    tab += t.image.toString() + ")"; jjtn000.value = tab; {if (true) return tab;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

// the conditions for the selection
  final public String condition() throws ParseException {
 /*@bgen(jjtree) COND */
 SimpleNode jjtn000 = new SimpleNode(JJTCOND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t; String cond = ""; String s;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALIAS:
        cond = variable();
        break;
      case CONSTRAIN:
        t = jj_consume_token(CONSTRAIN);
                          cond += t.image.toString();
        break;
      case NUMBER:
        t = jj_consume_token(NUMBER);
                       cond += t.image.toString();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
        jj_consume_token(25);
            cond += "=";
        break;
      case 26:
        jj_consume_token(26);
            cond += ">";
        break;
      case 27:
        jj_consume_token(27);
            cond += "<";
        break;
      case 28:
        jj_consume_token(28);
             cond += ">=";
        break;
      case 29:
        jj_consume_token(29);
             cond += "<=";
        break;
      case 30:
        jj_consume_token(30);
             cond += "!=";
        break;
      case 31:
        jj_consume_token(31);
             cond += "<>";
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTRAIN:
        t = jj_consume_token(CONSTRAIN);
                          cond += t.image.toString();
        break;
      case NUMBER:
        t = jj_consume_token(NUMBER);
                       cond += t.image.toString();
        break;
      case ALIAS:
        s = variable();
                       cond += s;
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.value = cond; {if (true) return cond;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public TupleTreeTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200020,0x400000,0x4000,0x2000,0x79c00,0x400000,0x58000,0xfe000000,0x58000,};
   }

  /** Constructor with InputStream. */
  public TupleTree(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TupleTree(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TupleTreeTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public TupleTree(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TupleTreeTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public TupleTree(TupleTreeTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(TupleTreeTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[32];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 32; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
