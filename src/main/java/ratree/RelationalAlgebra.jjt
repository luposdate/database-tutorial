/**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = false;}PARSER_BEGIN(RATree)package ratree;

public class RATree{  public static void main(String args [])  {    System.out.println("Please input a relational algebra expression: ");
    RATree ra = new RATree(System.in);
    try
    {
      SimpleNode n = ra.Start();
      n.dump("");
      System.out.println("Thank you.");
    }
    catch(ParseException e)
    {
      System.out.println("THE INPUT IS NOT A RELATIONAL ALGEBRA EXPRESSION!");
      System.out.println(e.getMessage());
    }
    catch(TokenMgrError e)
    {
      System.out.println("UNRECOGNISABLE TOKEN!");
      System.out.println(e.getMessage());
    }
  }}PARSER_END(RATree)SKIP :{  " "| "\t"| "\n"| "\r"}TOKEN : /* LITERALS */{  < PROJECT : "\u03c0" >
| < SELECT : "\u03c3" >
| < UNION : "\u222a" >
| < INTERSECT : "\u2229" >
| < RENAME : "\u03c1" >
| < JOIN : "\u22c8" >
| < CARTESIAN : "\u00d7" >
| < DIFFERENCE : "-" >
| < ASSIGN : "\u2190" >
| < COMPARE : ("<" | ">" | "!=" | "=" | "<=" | ">=") >
| < AND : "\u039b" >
| < OR : "\u2228" >}TOKEN : /* IDENTIFIERS */{  < NUMBER : (< DIGIT >)+ >
| < WORD : (< LETTER >)+ >
| < CONSTRAIN : "'"(~["'"])+"'" >
| < #DIGIT : [ "0"-"9" ] >
| < #LETTER : ["a"-"z", "A"-"Z"] >}

/**
* The JavaCC grammar for Relational Algebra expressions
* Used to generate a JavaCC parse tree.
*/SimpleNode Start() :{}{  expression() ";"  {    return jjtThis;  }}

int one_line() :
{}
{
  expression()";"
  {
    return 0;
  }
| ";"
  {
    return 1;
  }
}
// the relational algebra expressions
// they can be just relations, or projection, selection, set, rename or assignment expressionsString expression() #EXPR:{String s; String expr = "";}{
(
  expr = relation()
  (
    assignexpr()  )?
| expr = projectexpr()
| expr = selectexpr()
| expr = renameexpr()
| expr = assignexpr()
)
{jjtThis.value = expr;}
// the expression can be followed by zero or more expressions combined by set operators
  (
    LOOKAHEAD(2)
    s = setop() { expr += s; }
    s = expression() { expr += s; }
  )*
  { return expr;  }}

// assignment expressions. Assign the result of a relational algebra to another name
String assignexpr() #ASSIGN:
{Token t; String s; String assign = "";}{
  t = < ASSIGN > { assign += t.image.toString(); }
  s = expression()
  { assign += s; jjtThis.value = assign; return assign; }}

// the operators for the set expressions
String setop() #SETOP:
{Token t; String s; String set = "";}{
  (
      t = < JOIN >  { set += t.image.toString(); }
      (        "{"s = conditions()"}" { set += "{" + s + "}"; }
      )?
    | t = < CARTESIAN > { set += t.image.toString(); }
    | t = < DIFFERENCE > { set += t.image.toString(); }
    | t = < UNION > { set += t.image.toString(); }
    | t = < INTERSECT > { set += t.image.toString(); }
  )
  { jjtThis.value = set; return set; }}

// rename expression. Rename a relation, projection or selection expression
String renameexpr() #RENAME:
{Token t; String s; String rename = "";}{
  t = < RENAME > { rename += t.image.toString(); }
  t = < WORD >  { rename += t.image.toString(); }
  "("s = expression()")"
  { rename += "(" + s + ")"; jjtThis.value = rename; return rename; }}

// selection expression
String selectexpr() #SEL:
{Token t; String s; String sel = "";}
{
  t = < SELECT > { sel += t.image.toString(); }
  s = conditions() { sel += s; }
  "("s = expression()")"
  { sel += "(" + s + ")"; jjtThis.value = sel; return sel; }}

// project expression
String projectexpr() #PROJ:
{Token t; String s; String proj = "";}{
  t = < PROJECT > { proj += t.image.toString(); }
  s = attributelist() { proj += s; }
  "("s = expression()")"
  { proj += "(" + s + ")"; jjtThis.value = proj; return proj; }}

// the relations
String relation() #RELA:
{Token t; String s; String rela = "";}
{
  t = < WORD > { rela += t.image.toString(); }
  (t = < NUMBER > { rela += t.image.toString(); })*
  (t = < WORD > { rela += t.image.toString(); })*
  { jjtThis.value = rela; return rela; }}

// the attributes
String attribute() #ATTR:
{Token t; String s = "";}
{
(    t = < WORD >{ s += t.image.toString(); }     
    (t = < NUMBER > { s += t.image.toString(); })*
    (t = < WORD > { s += t.image.toString(); })*
  (
    "."t = < WORD >{ s += "." + t.image.toString(); }
    (t = < NUMBER > { s += t.image.toString(); })*
    (t = < WORD > { s += t.image.toString(); })*
  )?
)
  { jjtThis.value = s; return s; }
}

// a list of attributes, used in projectiong expressions
String attributelist() #ATTRLIST:
{Token t; String s; String attrlist = "";}{
  s = attribute() { attrlist += s; }
  (
    "," { attrlist += ","; }
    s = attribute() { attrlist += s; }  )*
  { jjtThis.value = attrlist; return attrlist; }}

// operands used in conditions
String operand() #OPER:
{ Token t; String s = ""; }
{
  (    s = attribute()
  | t = < CONSTRAIN > { s += t.image.toString(); }
  | t = < NUMBER > { s += t.image.toString(); }
  )
  { jjtThis.value = s; return s; }}

// one simple condition used in the conditions
String condition() #COND:
{Token t; String s; String cond = "";}
{
  cond = operand()
  t = < COMPARE > { cond += t.image.toString(); }
  s = operand()
  { cond += s; jjtThis.value = cond; return cond; }}

// a list of simple conditions used in selection expression
String conditions() #CONDS:
{ Token t; String s; String conds = ""; }{
  s = condition() {conds += s;}
 (
  s = andor() {conds += s;}
  s = condition() {conds += s;}
 )*
  {jjtThis.value = conds; return conds;}}

// AND or OR operands connect the conditions
String andor() #ANDOR:
{Token t; String andor = "";}{
  (    t = < AND >      
  | t = < OR >
  )
  {andor = t.image.toString(); jjtThis.value = andor; return andor;}}
